{"version":3,"sources":["E:/www/wordpress/wp-content/plugins/woo-point-of-sale/packages/navigation/src/test/index.js"],"names":["jest","mock","require","requireActual","getQuery","fn","mockReturnValue","filter","product_includes","period","compare","after","before","interval","search","describe","it","query","persistedQuery","expect","toEqual","type","searchWords","toThrow","Error","Object"],"mappings":"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","sourcesContent":["/** @format */\n/**\n * Internal dependencies\n */\nimport { getPersistedQuery, getSearchWords } from '../index';\n\njest.mock( '../index', () => ( {\n\t...require.requireActual( '../index' ),\n\tgetQuery: jest.fn().mockReturnValue( {\n\t\tfilter: 'advanced',\n\t\tproduct_includes: 127,\n\t\tperiod: 'year',\n\t\tcompare: 'previous_year',\n\t\tafter: '2018-02-01',\n\t\tbefore: '2018-01-01',\n\t\tinterval: 'day',\n\t\tsearch: 'lorem',\n\t} ),\n} ) );\n\ndescribe( 'getPersistedQuery', () => {\n\tit( \"should return an empty object it the query doesn't contain any time related parameters\", () => {\n\t\tconst query = {\n\t\t\tfilter: 'advanced',\n\t\t\tproduct_includes: 127,\n\t\t};\n\t\tconst persistedQuery = {};\n\n\t\texpect( getPersistedQuery( query ) ).toEqual( persistedQuery );\n\t} );\n\n\tit( 'should return time related parameters', () => {\n\t\tconst query = {\n\t\t\tfilter: 'advanced',\n\t\t\tproduct_includes: 127,\n\t\t\tperiod: 'year',\n\t\t\tcompare: 'previous_year',\n\t\t\tafter: '2018-02-01',\n\t\t\tbefore: '2018-01-01',\n\t\t\ttype: 'bar',\n\t\t\tinterval: 'day',\n\t\t};\n\t\tconst persistedQuery = {\n\t\t\tperiod: 'year',\n\t\t\tcompare: 'previous_year',\n\t\t\tafter: '2018-02-01',\n\t\t\tbefore: '2018-01-01',\n\t\t\ttype: 'bar',\n\t\t\tinterval: 'day',\n\t\t};\n\n\t\texpect( getPersistedQuery( query ) ).toEqual( persistedQuery );\n\t} );\n\n\tit( 'should get the query from getQuery() when none is provided in the params', () => {\n\t\tconst persistedQuery = {\n\t\t\tperiod: 'year',\n\t\t\tcompare: 'previous_year',\n\t\t\tafter: '2018-02-01',\n\t\t\tbefore: '2018-01-01',\n\t\t\tinterval: 'day',\n\t\t};\n\n\t\texpect( getPersistedQuery() ).toEqual( persistedQuery );\n\t} );\n} );\n\ndescribe( 'getSearchWords', () => {\n\tit( 'should get the search words from a query object', () => {\n\t\tconst query = {\n\t\t\tsearch: 'lorem,dolor sit',\n\t\t};\n\t\tconst searchWords = [ 'lorem', 'dolor sit' ];\n\n\t\texpect( getSearchWords( query ) ).toEqual( searchWords );\n\t} );\n\n\tit( 'should parse `%2C` as commas', () => {\n\t\tconst query = {\n\t\t\tsearch: 'lorem%2Cipsum,dolor sit',\n\t\t};\n\t\tconst searchWords = [ 'lorem,ipsum', 'dolor sit' ];\n\n\t\texpect( getSearchWords( query ) ).toEqual( searchWords );\n\t} );\n\n\tit( 'should return an empty array if the query has no `search` property', () => {\n\t\tconst query = {};\n\t\tconst searchWords = [];\n\n\t\texpect( getSearchWords( query ) ).toEqual( searchWords );\n\t} );\n\n\tit( 'should use the persisted query when it receives no params', () => {\n\t\tconst searchWords = [ 'lorem' ];\n\n\t\texpect( getSearchWords() ).toEqual( searchWords );\n\t} );\n\n\tit( 'should throw an error if the param is not an object', () => {\n\t\texpect( () => getSearchWords( 'lorem' ) ).toThrow( Error );\n\t} );\n\n\tit( 'should throw an error if the `search` property is not a string', () => {\n\t\tconst query = {\n\t\t\tsearch: new Object(),\n\t\t};\n\n\t\texpect( () => getSearchWords( query ) ).toThrow( Error );\n\t} );\n} );\n"]}